const express = require('express');
const app = express();
const jwt = require('jsonwebtoken');
var http = require('http');


// A map to store the users and their credentials
const users = new Map();
// add a map with 5 users
users.set('user1', { password: 'user1' , encoding: 'WyA0LjAxNjQwNjA5ZS0wMiAgMS4wMTUyODY4OWUtMDEgIDMuNDM3MzExMzllLTA0IC0yLjQxOTk5NjYzZS0wMgogLTguMTgxMTY2NjVlLTAyICA0Ljg0Mzk0ODA0ZS0wMiAtMy4xNTIwOTcwMmUtMDIgLTkuNTgxNTk4NjRlLTAyCiAgMi4zMTk0MjY4M2UtMDEgLTQuMDM3OTc4ODdlLTAyICAxLjMyMTY4MTQ0ZS0wMSAgOC45MTI2MzkzMmUtMDIKIC0yLjE4MTQzNDMzZS0wMSAgMS45NTYxMjc1OGUtMDMgIDMuMTIxMjg4ODdlLTAyICAxLjE4NTQ2ODUxZS0wMQogLTEuNDM0MDYxODNlLTAxIC0xLjA1MjY4NDExZS0wMSAtOS45OTkyNTczM2UtMDIgLTMuMzE1MTIwOTRlLTAyCiAtMS42Mzk2MzI1MWUtMDIgIDguNzI4NzE0MjllLTAyICAxLjg1ODUzMDk0ZS0wMiAgOS4zNjU1NTQ5MGUtMDIKIC0xLjMxMzMyMTU5ZS0wMSAtMi45NjQ1MTc0N2UtMDEgLTEuMTc3NDc3MDllLTAxIC00LjY1NTU5Mjg5ZS0wMgogIDkuNTkwMDUzNTZlLTAyIC04LjYxMzI5MTM4ZS0wMiAgNS40NjU2MDYyM2UtMDMgIDQuNzA4MDg4NTZlLTAyCiAtMS42NDEzMDU4M2UtMDEgLTIuMTY4NDEwMjdlLTAyICA5LjM2NTMzMjEzZS0wMiAgNi40NzY2NjYwM2UtMDIKIC00LjgwMzc0NjE5ZS0wMiAtMS4wMDI3MDY1MWUtMDEgIDEuODg0NzMzNDRlLTAxICAxLjQxNDU4MTg0ZS0wMQogLTEuNjE1MzM1NzllLTAxICA4LjEzODQ1MDk4ZS0wMiAgMi4wMjE3MDkwOGUtMDIgIDIuNDc4MTY3MTJlLTAxCiAgMS42MjI0NDU3M2UtMDEgIDIuMDQxNjYyMTFlLTAzICA3LjY4MDIzMTMzZS0wMiAtMS40NjczNTYzOGUtMDEKICA4LjQzMDQ1MTkwZS0wMiAtMi44MzA0Mjg0OGUtMDEgIDkuODAyNjkwODllLTAyICAxLjQ1NDA4MzYyZS0wMQogIDUuODEzNzkzODRlLTAyICA5LjExNTM5ODY4ZS0wMiAgNS41MzA2MTI1NGUtMDIgLTEuMzA4NjgzMDFlLTAxCiAtNC41NDk4MzExNWUtMDMgIDEuMDcyOTIzNjllLTAxIC0yLjM2ODA5NTM3ZS0wMSAgMS4yMzAwNDk3M2UtMDEKICAxLjMzODU5NzA5ZS0wMSAtMS4xMDUwNTM3MmUtMDIgLTkuMzkwMjE5MzBlLTAyIC00LjE4NTkxMjc2ZS0wMgogIDEuMTEwODgzMzZlLTAxICAxLjUwNDgzMjUxZS0wMSAtMS4yMzI3NTMyNWUtMDEgLTEuNzI1Njc4NTllLTAxCiAgMi4yODk1NjIzMGUtMDIgLTIuNDc4ODc3NzVlLTAxIC05LjE0NzEwNzYwZS0wMiAgMS4xMDIxMjQxNWUtMDEKIC00LjcxOTQ0ODQ2ZS0wMiAtMS43MDEwNjIwMmUtMDEgLTIuODYxNDIzNDllLTAxICA2LjI1MjAxMDE3ZS0wMgogIDQuNzczNTA0NzNlLTAxICAyLjIxNjExMjYxZS0wMSAtMS41OTQzNTcwNGUtMDEgLTIuMzYzMjA4MzFlLTAyCiAtNy4yNDQxNjAwM2UtMDIgLTEuNzMxMzI2ODBlLTAyICA2LjQ5MzI1MTc3ZS0wMiAgMS44NDk1ODEzMGUtMDIKIC0xLjMwODMzMDg5ZS0wMSAtMy41NDQ1MTgzNWUtMDIgLTIuMzgyMzkwMjBlLTAyICAxLjAzMzE3MjkxZS0wMQogIDIuNDA2MzA3MDFlLTAxICA2Ljg2MDA3MjE3ZS0wMiAtMi44MTM0NDI2MWUtMDIgIDIuNjAxOTM4NTVlLTAxCiAgNC4wMDEwNzc2NGUtMDIgIDUuNjQ3NDA4MjJlLTAyIC02LjI0ODg2NDgxZS0wMyAgOC4zODEyNDE1NmUtMDIKIC0yLjYyMDMzMDQ1ZS0wMiAtNi45NjI1OTczN2UtMDIgLTEuMTA5OTE4MDZlLTAxIC01LjEzNDYyMjc1ZS0wMgogIDIuNTk5MjkyOTllLTAyIC00LjEzMjA5ODMzZS0wMiAgNy4xMTc0NTA5OGUtMDIgIDguMzQxNTg4ODJlLTAyCiAtMi40MDA5Mjk2M2UtMDEgIDIuMDI3MDgwMjFlLTAxICAxLjgxMjIwNzcwZS0wMiAtMS4wNzkzMDk1OGUtMDEKICA5LjYzNDQwMDkwZS0wMiAgOC4yNzEzNDQwMWUtMDIgLTIuMDY1MjY3ODZlLTAxIC01LjU2NDQ2NjEyZS0wMwogIDIuMjA3ODk1MjJlLTAxIC0zLjAxODIwNTE3ZS0wMSAgMS45MjQ1ODQzNmUtMDEgIDEuNzAxNjEzMzdlLTAxCiAgNS45MDUwNzE2NWUtMDIgIDYuMzA0NjA4MjllLTAyICA1LjM4NzI4MDE0ZS0wMiAgMS4wMjI2MDA4M2UtMDEKIC00LjYwMzQzNDM1ZS0wMiAtOC40Mzc4OTg3NmUtMDIgLTYuMTc0MjYxMTJlLTAyIC04LjE3NjY2NjUwZS0wMgogIDMuMTkwMTQ0NTJlLTAyIC0yLjk0MzQ5NzkwZS0wMiAgNi42MjMyNzg1NmUtMDIgLTQuMzM2NjIwMTJlLTAyXQ=='});
users.set('user2', { password: '' , encoding: 'WyA0LjAxNjQwNjA5ZS0wMiAgMS4wMTUyODY4OWUtMDEgIDMuNDM3MzExMzllLTA0IC0yLjQxOTk5NjYzZS0wMgogLTguMTgxMTY2NjVlLTAyICA0Ljg0Mzk0ODA0ZS0wMiAtMy4xNTIwOTcwMmUtMDIgLTkuNTgxNTk4NjRlLTAyCiAgMi4zMTk0MjY4M2UtMDEgLTQuMDM3OTc4ODdlLTAyICAxLjMyMTY4MTQ0ZS0wMSAgOC45MTI2MzkzMmUtMDIKIC0yLjE4MTQzNDMzZS0wMSAgMS45NTYxMjc1OGUtMDMgIDMuMTIxMjg4ODdlLTAyICAxLjE4NTQ2ODUxZS0wMQogLTEuNDM0MDYxODNlLTAxIC0xLjA1MjY4NDExZS0wMSAtOS45OTkyNTczM2UtMDIgLTMuMzE1MTIwOTRlLTAyCiAtMS42Mzk2MzI1MWUtMDIgIDguNzI4NzE0MjllLTAyICAxLjg1ODUzMDk0ZS0wMiAgOS4zNjU1NTQ5MGUtMDIKIC0xLjMxMzMyMTU5ZS0wMSAtMi45NjQ1MTc0N2UtMDEgLTEuMTc3NDc3MDllLTAxIC00LjY1NTU5Mjg5ZS0wMgogIDkuNTkwMDUzNTZlLTAyIC04LjYxMzI5MTM4ZS0wMiAgNS40NjU2MDYyM2UtMDMgIDQuNzA4MDg4NTZlLTAyCiAtMS42NDEzMDU4M2UtMDEgLTIuMTY4NDEwMjdlLTAyICA5LjM2NTMzMjEzZS0wMiAgNi40NzY2NjYwM2UtMDIKIC00LjgwMzc0NjE5ZS0wMiAtMS4wMDI3MDY1MWUtMDEgIDEuODg0NzMzNDRlLTAxICAxLjQxNDU4MTg0ZS0wMQogLTEuNjE1MzM1NzllLTAxICA4LjEzODQ1MDk4ZS0wMiAgMi4wMjE3MDkwOGUtMDIgIDIuNDc4MTY3MTJlLTAxCiAgMS42MjI0NDU3M2UtMDEgIDIuMDQxNjYyMTFlLTAzICA3LjY4MDIzMTMzZS0wMiAtMS40NjczNTYzOGUtMDEKICA4LjQzMDQ1MTkwZS0wMiAtMi44MzA0Mjg0OGUtMDEgIDkuODAyNjkwODllLTAyICAxLjQ1NDA4MzYyZS0wMQogIDUuODEzNzkzODRlLTAyICA5LjExNTM5ODY4ZS0wMiAgNS41MzA2MTI1NGUtMDIgLTEuMzA4NjgzMDFlLTAxCiAtNC41NDk4MzExNWUtMDMgIDEuMDcyOTIzNjllLTAxIC0yLjM2ODA5NTM3ZS0wMSAgMS4yMzAwNDk3M2UtMDEKICAxLjMzODU5NzA5ZS0wMSAtMS4xMDUwNTM3MmUtMDIgLTkuMzkwMjE5MzBlLTAyIC00LjE4NTkxMjc2ZS0wMgogIDEuMTEwODgzMzZlLTAxICAxLjUwNDgzMjUxZS0wMSAtMS4yMzI3NTMyNWUtMDEgLTEuNzI1Njc4NTllLTAxCiAgMi4yODk1NjIzMGUtMDIgLTIuNDc4ODc3NzVlLTAxIC05LjE0NzEwNzYwZS0wMiAgMS4xMDIxMjQxNWUtMDEKIC00LjcxOTQ0ODQ2ZS0wMiAtMS43MDEwNjIwMmUtMDEgLTIuODYxNDIzNDllLTAxICA2LjI1MjAxMDE3ZS0wMgogIDQuNzczNTA0NzNlLTAxICAyLjIxNjExMjYxZS0wMSAtMS41OTQzNTcwNGUtMDEgLTIuMzYzMjA4MzFlLTAyCiAtNy4yNDQxNjAwM2UtMDIgLTEuNzMxMzI2ODBlLTAyICA2LjQ5MzI1MTc3ZS0wMiAgMS44NDk1ODEzMGUtMDIKIC0xLjMwODMzMDg5ZS0wMSAtMy41NDQ1MTgzNWUtMDIgLTIuMzgyMzkwMjBlLTAyICAxLjAzMzE3MjkxZS0wMQogIDIuNDA2MzA3MDFlLTAxICA2Ljg2MDA3MjE3ZS0wMiAtMi44MTM0NDI2MWUtMDIgIDIuNjAxOTM4NTVlLTAxCiAgNC4wMDEwNzc2NGUtMDIgIDUuNjQ3NDA4MjJlLTAyIC02LjI0ODg2NDgxZS0wMyAgOC4zODEyNDE1NmUtMDIKIC0yLjYyMDMzMDQ1ZS0wMiAtNi45NjI1OTczN2UtMDIgLTEuMTA5OTE4MDZlLTAxIC01LjEzNDYyMjc1ZS0wMgogIDIuNTk5MjkyOTllLTAyIC00LjEzMjA5ODMzZS0wMiAgNy4xMTc0NTA5OGUtMDIgIDguMzQxNTg4ODJlLTAyCiAtMi40MDA5Mjk2M2UtMDEgIDIuMDI3MDgwMjFlLTAxICAxLjgxMjIwNzcwZS0wMiAtMS4wNzkzMDk1OGUtMDEKICA5LjYzNDQwMDkwZS0wMiAgOC4yNzEzNDQwMWUtMDIgLTIuMDY1MjY3ODZlLTAxIC01LjU2NDQ2NjEyZS0wMwogIDIuMjA3ODk1MjJlLTAxIC0zLjAxODIwNTE3ZS0wMSAgMS45MjQ1ODQzNmUtMDEgIDEuNzAxNjEzMzdlLTAxCiAgNS45MDUwNzE2NWUtMDIgIDYuMzA0NjA4MjllLTAyICA1LjM4NzI4MDE0ZS0wMiAgMS4wMjI2MDA4M2UtMDEKIC00LjYwMzQzNDM1ZS0wMiAtOC40Mzc4OTg3NmUtMDIgLTYuMTc0MjYxMTJlLTAyIC04LjE3NjY2NjUwZS0wMgogIDMuMTkwMTQ0NTJlLTAyIC0yLjk0MzQ5NzkwZS0wMiAgNi42MjMyNzg1NmUtMDIgLTQuMzM2NjIwMTJlLTAyXQ=='});
users.set('user3', { password: 'user3'});
users.set('user4', { password: 'user4'});
users.set('user5', { password: 'user5'});

// A helper function to check if the given credentials are correct
const checkCredentials = (username, password, encoding) => {
  if (!users.has(username)) {
    return false;
  }
  
  if (encoding != null) {

  }
  const user = users.get(username);
  //console.log(user, user.password, user.encoding)
  return (user.password === password || user.encoding === 'WyA0LjAxNjQwNjA5ZS0wMiAgMS4wMTUyODY4OWUtMDEgIDMuNDM3MzExMzllLTA0IC0yLjQxOTk5NjYzZS0wMgogLTguMTgxMTY2NjVlLTAyICA0Ljg0Mzk0ODA0ZS0wMiAtMy4xNTIwOTcwMmUtMDIgLTkuNTgxNTk4NjRlLTAyCiAgMi4zMTk0MjY4M2UtMDEgLTQuMDM3OTc4ODdlLTAyICAxLjMyMTY4MTQ0ZS0wMSAgOC45MTI2MzkzMmUtMDIKIC0yLjE4MTQzNDMzZS0wMSAgMS45NTYxMjc1OGUtMDMgIDMuMTIxMjg4ODdlLTAyICAxLjE4NTQ2ODUxZS0wMQogLTEuNDM0MDYxODNlLTAxIC0xLjA1MjY4NDExZS0wMSAtOS45OTkyNTczM2UtMDIgLTMuMzE1MTIwOTRlLTAyCiAtMS42Mzk2MzI1MWUtMDIgIDguNzI4NzE0MjllLTAyICAxLjg1ODUzMDk0ZS0wMiAgOS4zNjU1NTQ5MGUtMDIKIC0xLjMxMzMyMTU5ZS0wMSAtMi45NjQ1MTc0N2UtMDEgLTEuMTc3NDc3MDllLTAxIC00LjY1NTU5Mjg5ZS0wMgogIDkuNTkwMDUzNTZlLTAyIC04LjYxMzI5MTM4ZS0wMiAgNS40NjU2MDYyM2UtMDMgIDQuNzA4MDg4NTZlLTAyCiAtMS42NDEzMDU4M2UtMDEgLTIuMTY4NDEwMjdlLTAyICA5LjM2NTMzMjEzZS0wMiAgNi40NzY2NjYwM2UtMDIKIC00LjgwMzc0NjE5ZS0wMiAtMS4wMDI3MDY1MWUtMDEgIDEuODg0NzMzNDRlLTAxICAxLjQxNDU4MTg0ZS0wMQogLTEuNjE1MzM1NzllLTAxICA4LjEzODQ1MDk4ZS0wMiAgMi4wMjE3MDkwOGUtMDIgIDIuNDc4MTY3MTJlLTAxCiAgMS42MjI0NDU3M2UtMDEgIDIuMDQxNjYyMTFlLTAzICA3LjY4MDIzMTMzZS0wMiAtMS40NjczNTYzOGUtMDEKICA4LjQzMDQ1MTkwZS0wMiAtMi44MzA0Mjg0OGUtMDEgIDkuODAyNjkwODllLTAyICAxLjQ1NDA4MzYyZS0wMQogIDUuODEzNzkzODRlLTAyICA5LjExNTM5ODY4ZS0wMiAgNS41MzA2MTI1NGUtMDIgLTEuMzA4NjgzMDFlLTAxCiAtNC41NDk4MzExNWUtMDMgIDEuMDcyOTIzNjllLTAxIC0yLjM2ODA5NTM3ZS0wMSAgMS4yMzAwNDk3M2UtMDEKICAxLjMzODU5NzA5ZS0wMSAtMS4xMDUwNTM3MmUtMDIgLTkuMzkwMjE5MzBlLTAyIC00LjE4NTkxMjc2ZS0wMgogIDEuMTEwODgzMzZlLTAxICAxLjUwNDgzMjUxZS0wMSAtMS4yMzI3NTMyNWUtMDEgLTEuNzI1Njc4NTllLTAxCiAgMi4yODk1NjIzMGUtMDIgLTIuNDc4ODc3NzVlLTAxIC05LjE0NzEwNzYwZS0wMiAgMS4xMDIxMjQxNWUtMDEKIC00LjcxOTQ0ODQ2ZS0wMiAtMS43MDEwNjIwMmUtMDEgLTIuODYxNDIzNDllLTAxICA2LjI1MjAxMDE3ZS0wMgogIDQuNzczNTA0NzNlLTAxICAyLjIxNjExMjYxZS0wMSAtMS41OTQzNTcwNGUtMDEgLTIuMzYzMjA4MzFlLTAyCiAtNy4yNDQxNjAwM2UtMDIgLTEuNzMxMzI2ODBlLTAyICA2LjQ5MzI1MTc3ZS0wMiAgMS44NDk1ODEzMGUtMDIKIC0xLjMwODMzMDg5ZS0wMSAtMy41NDQ1MTgzNWUtMDIgLTIuMzgyMzkwMjBlLTAyICAxLjAzMzE3MjkxZS0wMQogIDIuNDA2MzA3MDFlLTAxICA2Ljg2MDA3MjE3ZS0wMiAtMi44MTM0NDI2MWUtMDIgIDIuNjAxOTM4NTVlLTAxCiAgNC4wMDEwNzc2NGUtMDIgIDUuNjQ3NDA4MjJlLTAyIC02LjI0ODg2NDgxZS0wMyAgOC4zODEyNDE1NmUtMDIKIC0yLjYyMDMzMDQ1ZS0wMiAtNi45NjI1OTczN2UtMDIgLTEuMTA5OTE4MDZlLTAxIC01LjEzNDYyMjc1ZS0wMgogIDIuNTk5MjkyOTllLTAyIC00LjEzMjA5ODMzZS0wMiAgNy4xMTc0NTA5OGUtMDIgIDguMzQxNTg4ODJlLTAyCiAtMi40MDA5Mjk2M2UtMDEgIDIuMDI3MDgwMjFlLTAxICAxLjgxMjIwNzcwZS0wMiAtMS4wNzkzMDk1OGUtMDEKICA5LjYzNDQwMDkwZS0wMiAgOC4yNzEzNDQwMWUtMDIgLTIuMDY1MjY3ODZlLTAxIC01LjU2NDQ2NjEyZS0wMwogIDIuMjA3ODk1MjJlLTAxIC0zLjAxODIwNTE3ZS0wMSAgMS45MjQ1ODQzNmUtMDEgIDEuNzAxNjEzMzdlLTAxCiAgNS45MDUwNzE2NWUtMDIgIDYuMzA0NjA4MjllLTAyICA1LjM4NzI4MDE0ZS0wMiAgMS4wMjI2MDA4M2UtMDEKIC00LjYwMzQzNDM1ZS0wMiAtOC40Mzc4OTg3NmUtMDIgLTYuMTc0MjYxMTJlLTAyIC04LjE3NjY2NjUwZS0wMgogIDMuMTkwMTQ0NTJlLTAyIC0yLjk0MzQ5NzkwZS0wMiAgNi42MjMyNzg1NmUtMDIgLTQuMzM2NjIwMTJlLTAyXQ==');
};


// A middleware to check if the user is authenticated
const checkAuthenticated = (req, res, next) => {
  const { username, password, encoding } = req.headers;
  if (checkCredentials(username, password, encoding)) {
    next();
  } else {
    res.status(401).send({
      message: 'Unauthorized: Invalid credentials'
    });
  }
};

// A route to register a new user
app.post('/register', (req, res) => {
  const { username, password } = req.body;
  if (users.has(username)) {
    res.status(400).send({
      message: 'Bad Request: A user with the given username already exists'
    });
  } else {
    users.set(username, { password });
    res.send({
      message: 'Successfully registered new user'
    });
  }
});

// a route to get only the signature
app.get('/signature', (req, res) => {

  callback = function(response) {
    signature = '';
    response.on('data', function (chunk) {
      signature += chunk;
    });
    
    response.on('end', function () {
    console.log("Signature Request");
            res.json({
                signature,
            });

    });
  }

  // request to the trust controller
  var req2 = http.request(options, callback);
  req2.end();

});


// A route to get the current user's profile
app.get('/profile', checkAuthenticated, (req, res) => {
  const { username } = req.headers;
  const { encoding } = req.headers;
  const user = users.get(username);

  callback = function(response) {
    signature = '';
    response.on('data', function (chunk) {
      // console.log("Chunk: " + chunk)
      signature += chunk;
    });
    
    response.on('end', function () {
      // console.log(req);
      console.log("User " + username + " is authenticated");
      jwt.sign({user:user},'secretkey',(err,token)=>{
            res.json({
                token, 
                signature,
            });
      });
    });
  }
  if(encoding != null) {
  console.log("Encoding: " + encoding, "Saved Encoding: " + user.encoding)
  var options = {
    host: '127.0.0.1',
    path: '/',
    port: '1234',
    headers: {
      'Content-Type': 'application/json',
      'username': username,
      'saved_encoding': user.encoding,
      'received_encoding': encoding,
    }
  };
  } else {
    var options = {
      host: '127.0.0.1',
      path: '/',
      port: '1234',
      headers: {
        'username': username,
        'Content-Type': 'application/json',
      }
    };
  }
  // request to the trust controller
  var req2 = http.request(options, callback);
  req2.end();

});

app.listen(3000, () => {
  console.log('Identity provider listening on port 3000!');
});
